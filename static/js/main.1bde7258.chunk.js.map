{"version":3,"sources":["logo.svg","util/media-query.js","theme.js","components/Container/index.js","components/FormField/index.js","components/Header/index.js","hooks/web3.js","constants/addresses.js","components/OptionForm/index.js","hooks/useSuggestedExpirationBlock.js","components/Page/index.js","pages/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","addConditionalRule","mediaQuery","when","conditional","media","breakpoints","onlySizes","xs","sm","md","lg","Object","keys","reduce","acc","size","boundaries","map","value","i","filter","join","css","up","down","createMediaQueries","GlobalStyles","createGlobalStyle","Container","styled","div","FormField","isInvalid","validationMessage","onChange","props","useState","isDirty","setDirty","invalid","isPristine","TextInputField","event","newValue","target","StyledHeader","header","Header","to","src","logo","alt","Web3Context","createContext","undefined","enableWeb3","a","async","window","ethereum","enable","autoRefreshOnNetworkChange","on","document","location","reload","web3","Web3","useWeb3","useContext","getAddresses","networkVersion","getNetworkVersion","weth","wbtc","usdc","dai","OptionForm","data","onSubmit","isSubmitting","underlyingAsset","setUnderlyingAsset","strikeAsset","setStrikeAsset","strikePrice","setStrikePrice","optionName","setOptionName","optionSymbol","setOptionSymbol","expirationBlock","setExpirationBlock","suggestedExpirationBlock","blocksAhead","suggested","setSuggested","useEffect","eth","getBlockNumber","then","blockNumber","useSuggestedExpirationBlock","formData","suggestedName","replace","parseFloat","toUpperCase","suggestedSymbol","suggestSymbol","preventDefault","getTokenAddress","SelectField","label","isRequired","type","placeholder","min","onKeyPress","preventMinus","toString","Button","appearance","isLoading","asset","e","which","keyCode","stopPropagation","StyledPage","Page","children","path","exact","render","Dashboard","setLoading","getAccounts","account","optionContract","Contract","OptionABI","underlyingAssetDecimals","deploy","send","from","receipt","deployedAddress","contractAddress","console","log","deployedOptionContract","methods","initialize","name","deployContract","toaster","success","catch","error","danger","finally","App","lazy","setWeb3","useCallback","useWeb3Provider","Provider","basename","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"m8OAAAA,EAAOC,QAAU,IAA0B,kC,yoBCyD3C,SAASC,EAAoBC,GAC3BA,EAAWC,KAAO,SAAAC,GAAW,OAAIA,EAAcF,EAAa,iBAAM,K,+eCtD7D,IAgBMG,EDlBE,SAA6BC,GAC1C,IAAMD,EAAQ,GAERE,EAAY,CAChBC,GAAI,CAAC,KAAMF,EAAYG,GAAK,GAC5BA,GAAI,CAACH,EAAYG,GAAIH,EAAYI,GAAK,GACtCA,GAAI,CAACJ,EAAYI,GAAIJ,EAAYK,GAAK,GACtCA,GAAI,CAACL,EAAYK,GAAI,OA6CvB,OA1CAC,OAAOC,KAAKN,GAAWO,QAAO,SAACC,EAAKC,GAClC,IAAMC,EAAaV,EAAUS,GAC1BE,KAAI,SAACC,EAAOC,GACX,OAAID,EACW,IAANC,EAAA,sBAAyBD,EAAzB,6BAAqDA,EAArD,OAGF,QAERE,QAAO,SAAAF,GAAK,MAAqB,kBAAVA,KACvBG,KAAK,SAUR,OARAP,EAAIC,GAAQ,kBAAaO,YAAZ,IACFN,EACLM,IAAG,WAAH,eAINtB,EAAmBc,EAAIC,IAEhBD,IACNV,GAEHO,OAAOC,KAAKP,GAAaQ,QAAO,SAACC,EAAKC,GAgBpC,OAfAD,EAAIC,GAAMQ,GAAK,kBAAaD,YAAZ,IACOjB,EAAYU,GAC7BO,IAAG,WAAH,eAINR,EAAIC,GAAMS,KAAO,kBAAaF,YAAZ,IACKjB,EAAYU,GAC7BO,IAAG,WAAH,eAINtB,EAAmBc,EAAIC,GAAMQ,IAC7BvB,EAAmBc,EAAIC,GAAMS,MAEtBV,IACNV,GAEIA,EClCYqB,CAPA,CACnBlB,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,OAKOgB,EAAeC,YAAH,K,0iBCnBzB,IAaeC,EAbGC,IAAOC,IAAV,IAOX1B,EAAMG,GAAGgB,GAPE,KAQXnB,EAAMI,GAAGe,GARE,KASXnB,EAAMK,GAAGc,GATE,KAUXnB,EAAMM,GAAGa,GAVE,M,0BCAA,SAASQ,EAAT,GAAkF,IAA5DC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,kBAAmBf,EAA6B,EAA7BA,MAAOgB,EAAsB,EAAtBA,SAAaC,EAAS,sEAClEC,oBAAS,GADyD,mBACvFC,EADuF,KAC9EC,EAD8E,KAE1FC,GAAU,EAMd,MAJyB,oBAAdP,IACTO,EAAUP,EAAU,CAAEd,QAAOmB,UAASG,YAAaH,KAInD,kBAACI,EAAA,EAAD,iBACMN,EADN,CAEED,SAAU,SAAAQ,GACR,IAAMC,EAAWD,EAAME,OAAO1B,MAEzBmB,GAAWM,IAAazB,GAC3BoB,GAAS,GAGXJ,EAASS,IAEXX,UAAWO,EACXN,kBAAmBM,EAAUN,EAAoB,Q,ycCjBvD,IAAMY,EAAehB,IAAOiB,OAAV,IHFJ,UGgBVlB,GAaW,SAASmB,IACtB,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAMG,GAAG,KACP,yBAAKC,IAAKC,IAAMC,IAAI,mBACpB,iD,kECrCGC,EAAcC,6BAAcC,GAelC,SAAeC,IAAf,mBAAAC,EAAAC,OAAA,qDACgBC,SAAbC,EADH,EACGA,UADH,kCAAAH,EAAA,MAIGG,EAASC,UAJZ,cAMHD,EAASE,4BAA6B,EACtCF,EAASG,GAAG,kBAAkB,WAC5BC,SAASC,SAASC,YAGdC,EAAO,IAAIC,IAAKR,GAXnB,kBAYIO,GAZJ,qCAgBA,SAASE,IACd,OAAOC,qBAAWjB,GCjCL,SAASkB,IAGtB,ODqDK,WAA+B,IAC5BX,EAAaD,OAAbC,SAER,GAAIA,EACF,OAAOA,EAASY,eC3DFC,IAGd,KAAK,EACH,MAAO,CACLC,KAAM,6CACNC,KAAM,6CACNC,KAAM,6CACNC,IAAK,8CAET,KAAK,GACL,QACE,MAAO,CACLH,KAAM,6CACNC,KAAM,6CACNC,KAAM,6CACNC,IAAK,+CCbE,SAASC,EAAT,GAAkD,IAmH3CC,EAnHgBC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAAgB,EAChB5C,mBAAS,QADO,mBACvD6C,EADuD,KACtCC,EADsC,OAExB9C,mBAAS,OAFe,mBAEvD+C,EAFuD,KAE1CC,EAF0C,OAGxBhD,mBAAS,KAHe,mBAGvDiD,EAHuD,KAG1CC,EAH0C,OAI1BlD,mBAAS,IAJiB,mBAIvDmD,EAJuD,KAI3CC,EAJ2C,OAKtBpD,mBAAS,IALa,mBAKvDqD,EALuD,KAKzCC,EALyC,OAMhBtD,mBAAS,IANO,mBAMvDuD,EANuD,KAMtCC,EANsC,KAOxDC,ECVO,WAAwD,IAAlBC,EAAiB,uDAAH,EAC3D5B,EAAOE,IADuD,EAElChC,mBAAS,MAFyB,mBAE7D2D,EAF6D,KAElDC,EAFkD,KAUpE,OANAC,qBAAU,WACJ/B,GACFA,EAAKgC,IAAIC,iBAAiBC,MAAK,SAAAC,GAAW,OAAIL,EAAaK,EAAcP,QAE1E,CAAC5B,EAAM4B,IAEHC,EDA0BO,CAA4B,MAEvDC,EAAW,CACftB,kBACAE,cACAE,cACAE,aACAE,eACAE,mBAGIa,EAkGC,WADa1B,EAjGcyB,GAkGnBtB,gBAAgBwB,QAAQ,KAAM,IAAtC,YAA6C3B,EAAKK,YAAlD,YAAiEuB,WAAW5B,EAAKO,cAAgB,GAAIsB,cAjGtGC,EAoGR,SAAwB9B,GACtB,MAAO,UAAGA,EAAKG,gBAAgBwB,QAAQ,KAAM,IAAtC,YAA6C3B,EAAKK,YAAlD,YAAiEuB,WAAW5B,EAAKO,cAAgB,GAAIsB,cArGpFE,CAAcN,GAEtC,OACE,0BAAMxB,SAAU,SAAArC,GACdA,EAAMoE,iBAEN,IAAMhC,EAAI,eAAQyB,GAClBzB,EAAKG,gBAAkB8B,EAAgBjC,EAAKG,iBAC5CH,EAAKK,YAAc4B,EAAgBjC,EAAKK,aAEnCL,EAAKS,aACRT,EAAKS,WAAaiB,GAGf1B,EAAKW,eACRX,EAAKW,aAAemB,GAGjB9B,EAAKa,kBACRb,EAAKa,gBAAkBE,GAGzBd,EAASD,KAGT,kBAACkC,EAAA,EAAD,CACEC,MAAM,mBACNC,YAAU,EACVhG,MAAO+D,EACP/C,SAAU,SAAAQ,GAAK,OAAIwC,EAAmBxC,EAAME,OAAO1B,SAEnD,4BAAQA,MAAM,QAAd,SACA,4BAAQA,MAAM,QAAd,YAGF,kBAAC8F,EAAA,EAAD,CACEC,MAAM,eACNC,YAAU,EACVhG,MAAOiE,EACPjD,SAAU,SAAAQ,GAAK,OAAI0C,EAAe1C,EAAME,OAAO1B,SAE/C,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,SAGF,kBAACuB,EAAA,EAAD,CACEwE,MAAM,eACNC,YAAU,EACVC,KAAK,MACLC,YAAY,OACZC,IAAK,EACLnG,MAAOmE,EACPnD,SAAU,SAAAQ,GACR,IAAMxB,EAAQwB,EAAME,OAAO1B,MAAMuF,QAAQ,oBAAqB,MAC9DnB,EAAepE,IAEjBoG,WAAYC,IAGd,kBAACxF,EAAD,CACEkF,MAAM,cACNC,YAAU,EACVE,YAAaZ,EACbtF,MAAOqE,EACPrD,SAAUsD,IAGZ,kBAACzD,EAAD,CACEkF,MAAM,gBACNC,YAAU,EACVE,YAAaR,EACb1F,MAAOuE,EACPvD,SAAUwD,IAGZ,kBAACjD,EAAA,EAAD,CACEwE,MAAM,mBACNC,YAAU,EACVE,YAAiD,kBAA7BvB,EAAwCA,EAAyB2B,WAAa,GAClGtG,MAAOyE,EACPwB,KAAK,MACLE,IAAK,EACLnF,SAAU,SAAAQ,GACR,IAAMxB,EAAQwB,EAAME,OAAO1B,MAAMuF,QAAQ,MAAO,IAChDb,EAAmB1E,IAErBoG,WAAYC,IAGd,kBAACE,EAAA,EAAD,CAAQC,WAAW,UAAUP,KAAK,SAASQ,UAAW3C,GACnDA,EAAe,kBAAoB,kBAc5C,SAAS+B,EAAiBa,GAExB,OADkBtD,IACDsD,GAGnB,SAASL,EAAcM,GAIJ,MAHAA,EAAEC,MAAQD,EAAEC,MAAQD,EAAEE,WAIrCF,EAAEf,iBACFe,EAAEG,mB,kNExIN,IAAMC,EAAapG,IAAOC,IAAV,KAWD,SAASoG,EAAT,GAA2D,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,KAA+B,IAAzBC,aAAyB,SAAVC,EAAU,EAAVA,OAC7D,OACE,kBAAC,IAAD,CACEF,KAAMA,EAAMC,MAAOA,EAAOC,OAAQ,SAAAnG,GAAK,OACrC,kBAAC8F,EAAD,KACE,8BACqB,oBAAXK,EAAwBA,EAAOnG,GAASgG,O,sBCf7C,SAASI,IACtB,IAAMrE,EAAOE,IADsB,EAEHhC,oBAAS,GAFN,mBAE5BuF,EAF4B,KAEjBa,EAFiB,KAInC,OACE,kBAACN,EAAD,CAAME,KAAK,IAAIC,OAAK,GAClB,kBAAC,EAAD,KACE,kBAACxD,EAAD,CACEG,aAAc2C,EACd5C,SAAU,SAAAD,GACJZ,IACFsE,GAAW,GAmBzB,SAA+BtE,EAA/B,0CAAAV,EAAAC,OAAA,uDAAuC8B,EAAvC,EAAuCA,WAAYE,EAAnD,EAAmDA,aAAcR,EAAjE,EAAiEA,gBAAiBE,EAAlF,EAAkFA,YAAaE,EAA/F,EAA+FA,YAAaM,EAA5G,EAA4GA,gBAA5G,WAAAnC,EAAA,MAC0BU,EAAKgC,IAAIuC,eADnC,0CACSC,EADT,KAEmB,uq3BACXC,EAAiB,IAAIzE,EAAKgC,IAAI0C,SAASC,GACvCC,EAA0B,GAJlC,YAAAtF,EAAA,MAQQmF,EACHI,OAAO,CAAEjE,KAPK,yq3BAQdkE,KAAK,CAAEC,KAAMP,IACb5E,GAAG,WAAW,SAAAoF,GACbC,EAAkBD,EAAQE,oBAZhC,eAeEC,QAAQC,IAAR,4BAAiCH,IAE3BI,EAAyB,IAAIrF,EAAKgC,IAAI0C,SAASC,EAAWM,GAjBlE,YAAA3F,EAAA,MAmBQ+F,EACHC,QAAQC,WACPlE,EACAE,EACAR,EACA6D,EACA3D,GACe,KAAdE,GAAoBmC,WACrB7B,GAEDqD,KAAK,CAAEC,KAAMP,KA7BlB,iCA+BS,CAAEgB,KAAMnE,EAAY4D,oBA/B7B,sCAjBcQ,CAAezF,EAAMY,GAClBsB,MAAK,gBAAGsD,EAAH,EAAGA,KAAMP,EAAT,EAASA,gBAAT,OAA+BS,IAAQC,QAAR,UAAmBH,EAAnB,qCAAoDP,OACxFW,OAAM,SAAAC,GACLV,QAAQU,MAAMA,GACdH,IAAQI,OAAR,wCAAgDD,EAAMvC,gBAEvDyC,SAAQ,WACPzB,GAAW,YCHd0B,MAdf,WAAiB,IACPhG,ENLH,WAAyC,IAAfiG,EAAc,0DACrB/H,mBAAS,MADY,mBACtC8B,EADsC,KAChCkG,EADgC,KAEvCxG,EAASyG,uBAAY,kBAAM9G,IAAa6C,KAAKgE,KAAU,IAQ7D,OANAnE,qBAAU,WACHkE,GACHvG,MAED,CAACuG,EAAMvG,IAEH,CAAEM,OAAMN,UMLE0G,GAATpG,KAER,OACE,kBAACd,EAAYmH,SAAb,CAAsBrJ,MAAOgD,GAC3B,kBAACxC,EAAD,MACA,kBAAC,IAAD,CAAQ8I,SARkD,oBASxD,kBAACzH,EAAD,MACA,kBAACwF,EAAD,SCLYkC,QACW,cAA7B/G,OAAOM,SAAS0G,UAEe,UAA7BhH,OAAOM,SAAS0G,UAEhBhH,OAAOM,SAAS0G,SAASC,MACvB,2DCZNC,IAAStC,OAAO,kBAAC,EAAD,MAASvE,SAAS8G,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5E,MAAK,SAAA6E,GACjCA,EAAaC,kB","file":"static/js/main.1bde7258.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cc8307fe.svg\";","import { css } from 'styled-components'\n\nexport default function createMediaQueries (breakpoints) {\n  const media = {}\n\n  const onlySizes = {\n    xs: [null, breakpoints.sm - 1],\n    sm: [breakpoints.sm, breakpoints.md - 1],\n    md: [breakpoints.md, breakpoints.lg - 1],\n    lg: [breakpoints.lg, null]\n  }\n\n  Object.keys(onlySizes).reduce((acc, size) => {\n    const boundaries = onlySizes[size]\n      .map((value, i) => {\n        if (value) {\n          return i === 0 ? `(min-width: ${value}px)` : `(max-width: ${value}px)`\n        }\n\n        return null\n      })\n      .filter(value => typeof value === 'string')\n      .join(' and ')\n\n    acc[size] = (...args) => css`\n      @media ${boundaries} {\n        ${css(...args)}\n      }\n    `\n\n    addConditionalRule(acc[size])\n\n    return acc\n  }, media)\n\n  Object.keys(breakpoints).reduce((acc, size) => {\n    acc[size].up = (...args) => css`\n      @media (min-width: ${breakpoints[size]}px) {\n        ${css(...args)}\n      }\n    `\n\n    acc[size].down = (...args) => css`\n      @media (max-width: ${breakpoints[size]}px) {\n        ${css(...args)}\n      }\n    `\n\n    addConditionalRule(acc[size].up)\n    addConditionalRule(acc[size].down)\n\n    return acc\n  }, media)\n\n  return media\n}\n\nfunction addConditionalRule (mediaQuery) {\n  mediaQuery.when = conditional => conditional ? mediaQuery : () => ''\n}\n","import { createGlobalStyle } from 'styled-components'\nimport createMediaQueries from 'util/media-query'\n\n// Colors\nexport const color = {\n  background: '#324a5e',\n  primary: '#3498db',\n  success: '#2ecc71',\n  danger: '#e74c3c',\n  warning: '#f1c40f',\n  grey: '#e1e1e1'\n}\n\nexport const sizes = {\n  xs: 576,\n  sm: 768,\n  md: 992,\n  lg: 1280\n}\n\nexport const media = createMediaQueries(sizes)\n\nexport const GlobalStyles = createGlobalStyle`\n  html {\n    font-family: 'Source Sans Pro', sans-serif;\n    font-size: 16px;\n    color: rgb(1, 1, 1);\n  }\n  \n  body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    font-family: inherit;\n    \n    & > div {\n      height: 100%;\n      overflow: auto;\n    }\n  }\n  \n  .exchange-button {\n    display: block;\n    margin: 10px auto;\n    text-align: center;\n  }\n`\n","import styled from 'styled-components'\nimport { media } from 'theme'\n\nconst Container = styled.div`\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n  width: 100%;\n\n  ${media.xs.up`max-width: 540px;`}\n  ${media.sm.up`max-width: 720px;`}\n  ${media.md.up`max-width: 960px;`}\n  ${media.lg.up`max-width: 1140px;`}\n`\n\nexport default Container\n","import React, { useState } from 'react'\nimport { TextInputField } from 'evergreen-ui'\n\nexport default function FormField ({ isInvalid, validationMessage, value, onChange, ...props }) {\n  const [isDirty, setDirty] = useState(false)\n  let invalid = false\n\n  if (typeof isInvalid === 'function') {\n    invalid = isInvalid({ value, isDirty, isPristine: !isDirty })\n  }\n\n  return (\n    <TextInputField\n      {...props}\n      onChange={event => {\n        const newValue = event.target.value\n\n        if (!isDirty && newValue !== value) {\n          setDirty(true)\n        }\n\n        onChange(newValue)\n      }}\n      isInvalid={invalid}\n      validationMessage={invalid ? validationMessage : null}\n    />\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Container } from 'components'\nimport { Link } from 'react-router-dom'\nimport logo from '../../logo.svg'\nimport { color } from 'theme'\n\nconst StyledHeader = styled.header`\n  img {\n    max-width: 26px;\n    display: inline-block;\n  }\n  \n  h1 {\n    color: ${color.background};\n    display: inline-block;\n    font-size: 16px;\n    font-weight: lighter;\n    margin: 0 10px;\n  }\n  \n  ${Container} {\n    display: flex;\n    align-items: center;\n    padding: 20px 15px;\n    user-select: none;\n  }\n  \n  a {\n    display: flex;\n    width: 200px;\n  }\n`\n\nexport default function Header () {\n  return (\n    <StyledHeader>\n      <Container>\n        <Link to='/'>\n          <img src={logo} alt='Option Builder' />\n          <h1>Option Builder</h1>\n        </Link>\n      </Container>\n    </StyledHeader>\n  )\n}\n","import { createContext, useCallback, useContext, useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nexport const Web3Context = createContext(undefined)\n\nexport function useWeb3Provider (lazy = false) {\n  const [web3, setWeb3] = useState(null)\n  const enable = useCallback(() => enableWeb3().then(setWeb3), [])\n\n  useEffect(() => {\n    if (!lazy) {\n      enable()\n    }\n  }, [lazy, enable])\n\n  return { web3, enable }\n}\n\nexport async function enableWeb3 () {\n  const { ethereum } = window\n\n  if (ethereum) {\n    await ethereum.enable()\n\n    ethereum.autoRefreshOnNetworkChange = false\n    ethereum.on('networkChanged', () => {\n      document.location.reload()\n    })\n\n    const web3 = new Web3(ethereum)\n    return web3\n  }\n}\n\nexport function useWeb3 () {\n  return useContext(Web3Context)\n}\n\nexport function useDefaultAccount () {\n  const [account, setAccount] = useState()\n  const { ethereum } = window\n\n  useEffect(() => {\n    const _setAccount = accounts => setAccount(accounts[0])\n\n    if (ethereum) {\n      _setAccount([ethereum.selectedAddress])\n      ethereum.on('accountsChanged', _setAccount)\n    }\n\n    return () => {\n      ethereum.off('accountsChanged', _setAccount)\n    }\n  }, [ethereum])\n\n  return account\n}\n\nexport function getNetworkVersion () {\n  const { ethereum } = window\n\n  if (ethereum) {\n    return ethereum.networkVersion\n  }\n}\n","import { getNetworkVersion } from 'hooks/web3'\n\nexport default function getAddresses () {\n  const network = getNetworkVersion()\n\n  switch (network) {\n    case 1:\n      return {\n        weth: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n        wbtc: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',\n        usdc: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        dai: '0x6b175474e89094c44da98b954eedeac495271d0f'\n      }\n    case 42:\n    default:\n      return {\n        weth: '0xd0a1e359811322d97991e03f863a0c30c2cf029c',\n        wbtc: '0xe8c015754c5966777bf176127f3cf15f03fa98a2',\n        usdc: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        dai: '0x7cedcc5a8344a079ed7863577cf93cd7db80c1b2'\n      }\n  }\n}\n","import React, { useState } from 'react'\nimport { Button, SelectField, TextInputField } from 'evergreen-ui'\nimport { FormField } from 'components'\nimport getAddresses from 'constants/addresses'\nimport useSuggestedExpirationBlock from 'hooks/useSuggestedExpirationBlock'\n\nexport default function OptionForm ({ onSubmit, isSubmitting }) {\n  const [underlyingAsset, setUnderlyingAsset] = useState('weth')\n  const [strikeAsset, setStrikeAsset] = useState('dai')\n  const [strikePrice, setStrikePrice] = useState(200)\n  const [optionName, setOptionName] = useState('')\n  const [optionSymbol, setOptionSymbol] = useState('')\n  const [expirationBlock, setExpirationBlock] = useState('')\n  const suggestedExpirationBlock = useSuggestedExpirationBlock(2880) // 1 month\n\n  const formData = {\n    underlyingAsset,\n    strikeAsset,\n    strikePrice,\n    optionName,\n    optionSymbol,\n    expirationBlock\n  }\n\n  const suggestedName = suggestName(formData)\n  const suggestedSymbol = suggestSymbol(formData)\n\n  return (\n    <form onSubmit={event => {\n      event.preventDefault()\n\n      const data = { ...formData }\n      data.underlyingAsset = getTokenAddress(data.underlyingAsset)\n      data.strikeAsset = getTokenAddress(data.strikeAsset)\n\n      if (!data.optionName) {\n        data.optionName = suggestedName\n      }\n\n      if (!data.optionSymbol) {\n        data.optionSymbol = suggestedSymbol\n      }\n\n      if (!data.expirationBlock) {\n        data.expirationBlock = suggestedExpirationBlock\n      }\n\n      onSubmit(data)\n    }}\n    >\n      <SelectField\n        label='Underlying asset'\n        isRequired\n        value={underlyingAsset}\n        onChange={event => setUnderlyingAsset(event.target.value)}\n      >\n        <option value='weth'>Ether</option>\n        <option value='wbtc'>Bitcoin</option>\n      </SelectField>\n\n      <SelectField\n        label='Strike asset'\n        isRequired\n        value={strikeAsset}\n        onChange={event => setStrikeAsset(event.target.value)}\n      >\n        <option value='dai'>DAI</option>\n        <option value='usdc'>USDC</option>\n      </SelectField>\n\n      <TextInputField\n        label='Strike price'\n        isRequired\n        type='tel'\n        placeholder='0.00'\n        min={0}\n        value={strikePrice}\n        onChange={event => {\n          const value = event.target.value.replace(/(^.*?\\.\\d{2}).*?$/, '$1')\n          setStrikePrice(value)\n        }}\n        onKeyPress={preventMinus}\n      />\n\n      <FormField\n        label='Option name'\n        isRequired\n        placeholder={suggestedName}\n        value={optionName}\n        onChange={setOptionName}\n      />\n\n      <FormField\n        label='Option symbol'\n        isRequired\n        placeholder={suggestedSymbol}\n        value={optionSymbol}\n        onChange={setOptionSymbol}\n      />\n\n      <TextInputField\n        label='Expiration block'\n        isRequired\n        placeholder={typeof suggestedExpirationBlock === 'number' ? suggestedExpirationBlock.toString() : ''}\n        value={expirationBlock}\n        type='tel'\n        min={0}\n        onChange={event => {\n          const value = event.target.value.replace(/\\D/g, '')\n          setExpirationBlock(value)\n        }}\n        onKeyPress={preventMinus}\n      />\n\n      <Button appearance='primary' type='submit' isLoading={isSubmitting}>\n        {isSubmitting ? 'Creating Option' : 'Create Option'}\n      </Button>\n    </form>\n  )\n}\n\nfunction suggestName (data) {\n  return `${data.underlyingAsset.replace(/^w/, '')} ${data.strikeAsset} ${parseFloat(data.strikePrice) || 0}`.toUpperCase()\n}\n\nfunction suggestSymbol (data) {\n  return `${data.underlyingAsset.replace(/^w/, '')}:${data.strikeAsset}:${parseFloat(data.strikePrice) || 0}`.toUpperCase()\n}\n\nfunction getTokenAddress (asset) {\n  const addresses = getAddresses()\n  return addresses[asset]\n}\n\nfunction preventMinus (e) {\n  const charCode = e.which ? e.which : e.keyCode\n\n  // Prevent 'minus' character\n  if (charCode === 45) {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n}\n","import { useEffect, useState } from 'react'\nimport { useWeb3 } from './web3'\n\nexport default function useSuggestedExpirationBlock (blocksAhead = 0) {\n  const web3 = useWeb3()\n  const [suggested, setSuggested] = useState(null)\n\n  useEffect(() => {\n    if (web3) {\n      web3.eth.getBlockNumber().then(blockNumber => setSuggested(blockNumber + blocksAhead))\n    }\n  }, [web3, blocksAhead])\n\n  return suggested\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Route } from 'react-router-dom'\n\nconst StyledPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  \n  main {\n    flex-grow: 1;\n    padding: 30px 0;\n  }\n`\n\nexport default function Page ({ children, path, exact = false, render }) {\n  return (\n    <Route\n      path={path} exact={exact} render={props => (\n        <StyledPage>\n          <main>\n            {typeof render === 'function' ? render(props) : children}\n          </main>\n        </StyledPage>\n      )}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport { Container, OptionForm, Page } from 'components'\nimport OptionABI from 'abi/option'\nimport { useWeb3 } from 'hooks/web3'\nimport { toaster } from 'evergreen-ui'\n\nexport default function Dashboard () {\n  const web3 = useWeb3()\n  const [isLoading, setLoading] = useState(false)\n\n  return (\n    <Page path='/' exact>\n      <Container>\n        <OptionForm\n          isSubmitting={isLoading}\n          onSubmit={data => {\n            if (web3) {\n              setLoading(true)\n\n              deployContract(web3, data)\n                .then(({ name, deployedAddress }) => toaster.success(`${name} deployed successfully at ${deployedAddress}`))\n                .catch(error => {\n                  console.error(error)\n                  toaster.danger(`Contract not deployed. Error: ${error.toString()}`)\n                })\n                .finally(() => {\n                  setLoading(false)\n                })\n            }\n          }}\n        />\n      </Container>\n    </Page>\n  )\n}\n\nasync function deployContract (web3, { optionName, optionSymbol, underlyingAsset, strikeAsset, strikePrice, expirationBlock }) {\n  const [account] = await web3.eth.getAccounts()\n  const bytecode = '0x608060405261373e806100136000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637158da7c11610104578063a0712d68116100a2578063ab9068d211610071578063ab9068d214610a44578063c52987cf14610a62578063dd62ed3e14610a80578063f6fa384c14610af8576101cf565b8063a0712d6814610928578063a457c2d714610956578063a9059cbb146109bc578063ab14489714610a22576101cf565b806395d89b41116100de57806395d89b41146107045780639a32c207146107875780639ae697bf146107ab578063a02d22cf14610803576101cf565b80637158da7c1461068e57806371a53deb146106d857806390e64d13146106e2576101cf565b80633950935111610171578063535565591161014b57806353556559146105cc57806356e2e0f1146105fa57806359356c5c1461061857806370a0823114610636576101cf565b8063395093511461052e5780633ccfd60b1461059457806342966c681461059e576101cf565b806317d69bc8116101ad57806317d69bc81461041c57806318160ddd1461046657806323b872dd14610484578063313ce5671461050a576101cf565b806306fdde03146101d4578063095ea7b3146102575780631624f6c6146102bd575b600080fd5b6101dc610c27565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021c578082015181840152602081019050610201565b50505050905090810190601f1680156102495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102a36004803603604081101561026d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b61041a600480360360608110156102d357600080fd5b81019080803590602001906401000000008111156102f057600080fd5b82018360208201111561030257600080fd5b8035906020019184600183028401116401000000008311171561032457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561038757600080fd5b82018360208201111561039957600080fd5b803590602001918460018302840111640100000000831117156103bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050610ce7565b005b610424610e32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61046e610e58565b6040518082815260200191505060405180910390f35b6104f06004803603606081101561049a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e62565b604051808215151515815260200191505060405180910390f35b610512610f3b565b604051808260ff1660ff16815260200191505060405180910390f35b61057a6004803603604081101561054457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f52565b604051808215151515815260200191505060405180910390f35b61059c611005565b005b6105ca600480360360208110156105b457600080fd5b81019080803590602001909291905050506110c9565b005b6105f8600480360360208110156105e257600080fd5b8101908080359060200190929190505050611402565b005b61060261177b565b6040518082815260200191505060405180910390f35b610620611781565b6040518082815260200191505060405180910390f35b6106786004803603602081101561064c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611862565b6040518082815260200191505060405180910390f35b6106966118ab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106e06118d1565b005b6106ea611940565b604051808215151515815260200191505060405180910390f35b61070c61194f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074c578082015181840152602081019050610731565b50505050905090810190601f1680156107795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61078f6119f1565b604051808260ff1660ff16815260200191505060405180910390f35b6107ed600480360360208110156107c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a04565b6040518082815260200191505060405180910390f35b610926600480360360c081101561081957600080fd5b810190808035906020019064010000000081111561083657600080fd5b82018360208201111561084857600080fd5b8035906020019184600183028401116401000000008311171561086a57600080fd5b90919293919293908035906020019064010000000081111561088b57600080fd5b82018360208201111561089d57600080fd5b803590602001918460018302840111640100000000831117156108bf57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a1c565b005b6109546004803603602081101561093e57600080fd5b8101908080359060200190929190505050611bd7565b005b6109a26004803603604081101561096c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e8f565b604051808215151515815260200191505060405180910390f35b610a08600480360360408110156109d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f5c565b604051808215151515815260200191505060405180910390f35b610a2a611f7a565b604051808215151515815260200191505060405180910390f35b610a4c611f8d565b6040518082815260200191505060405180910390f35b610a6a61206e565b6040518082815260200191505060405180910390f35b610ae260048036036040811015610a9657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612074565b6040518082815260200191505060405180910390f35b610c25600480360360e0811015610b0e57600080fd5b8101908080359060200190640100000000811115610b2b57600080fd5b820183602082011115610b3d57600080fd5b80359060200191846001830284011164010000000083111715610b5f57600080fd5b909192939192939080359060200190640100000000811115610b8057600080fd5b820183602082011115610b9257600080fd5b80359060200191846001830284011164010000000083111715610bb457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506120fb565b005b606060338054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050905090565b6000610cdd610cd661229a565b84846122a2565b6001905092915050565b600060019054906101000a900460ff1680610d065750610d05612499565b5b80610d1d57506000809054906101000a900460ff16155b610d72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806135b7602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610dc2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8360339080519060200190610dd89291906133e4565b508260349080519060200190610def9291906133e4565b5081603560006101000a81548160ff021916908360ff1602179055508015610e2c5760008060016101000a81548160ff0219169083151502179055505b50505050565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606a54905090565b6000610e6f8484846124aa565b610f3084610e7b61229a565b610f2b8560405180606001604052806028815260200161358f60289139606960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610ee161229a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125359092919063ffffffff16565b6122a2565b600190509392505050565b6000603560009054906101000a900460ff16905090565b6000610ffb610f5f61229a565b84610ff68560696000610f7061229a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125f590919063ffffffff16565b6122a2565b6001905092915050565b61100d61267d565b61107f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4f7074696f6e20686173206e6f7420657870697265642079657400000000000081525060200191505060405180910390fd5b6110c760a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461268a565b565b6110d161267d565b15611144576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4f7074696f6e206861732065787069726564000000000000000000000000000081525060200191505060405180910390fd5b60a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156111f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4e6f7420656e6f75676820756e6465726c79696e672062616c616e636500000081525060200191505060405180910390fd5b61124b8160a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b1390919063ffffffff16565b60a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112b2336112ad670de0b6b3a764000084612b5d90919063ffffffff16565b612be3565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33611306609f5485612b5d90919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561136f57600080fd5b505af1158015611383573d6000803e3d6000fd5b505050506040513d602081101561139957600080fd5b81019080805190602001909291905050506113ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613561602e913960400191505060405180910390fd5b50565b61140a61267d565b1561147d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4f7074696f6e206861732065787069726564000000000000000000000000000081525060200191505060405180910390fd5b6000609d60149054906101000a900460ff1660ff16600a0a82029050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561157657600080fd5b505af115801561158a573d6000803e3d6000fd5b505050506040513d60208110156115a057600080fd5b8101908080519060200190929190505050611606576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806136ba602b913960400191505060405180910390fd5b61162a33611625670de0b6b3a764000085612b5d90919063ffffffff16565b612be3565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361167e609f5486612b5d90919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156116e757600080fd5b505af11580156116fb573d6000803e3d6000fd5b505050506040513d602081101561171157600080fd5b8101908080519060200190929190505050611777576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806135176029913960400191505060405180910390fd5b5050565b60a05481565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d602081101561184c57600080fd5b8101908080519060200190929190505050905090565b6000606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60a260009054906101000a900460ff16611936576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806136386039913960400191505060405180910390fd5b600060a081905550565b600061194a61267d565b905090565b606060348054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119e75780601f106119bc576101008083540402835291602001916119e7565b820191906000526020600020905b8154815290600101906020018083116119ca57829003601f168201915b5050505050905090565b609d60149054906101000a900460ff1681565b60a16020528060005260406000206000915090505481565b600060019054906101000a900460ff1680611a3b5750611a3a612499565b5b80611a5257506000809054906101000a900460ff16155b611aa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806135b7602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611af7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611b9089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505087878787600019612d9d565b600160a260006101000a81548160ff0219169083151502179055508015611bcc5760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b611bdf61267d565b15611c52576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4f7074696f6e206861732065787069726564000000000000000000000000000081525060200191505060405180910390fd5b611ca48160a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125f590919063ffffffff16565b60a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d0b33611d06670de0b6b3a764000084612b5d90919063ffffffff16565b612e5d565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330611d60609f5486612b5d90919063ffffffff16565b6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611dfc57600080fd5b505af1158015611e10573d6000803e3d6000fd5b505050506040513d6020811015611e2657600080fd5b8101908080519060200190929190505050611e8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806136ba602b913960400191505060405180910390fd5b50565b6000611f52611e9c61229a565b84611f4d856040518060600160405280602581526020016136e56025913960696000611ec661229a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125359092919063ffffffff16565b6122a2565b6001905092915050565b6000611f70611f6961229a565b84846124aa565b6001905092915050565b60a260009054906101000a900460ff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561202e57600080fd5b505afa158015612042573d6000803e3d6000fd5b505050506040513d602081101561205857600080fd5b8101908080519060200190929190505050905090565b609f5481565b6000606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600060019054906101000a900460ff168061211a5750612119612499565b5b8061213157506000809054906101000a900460ff16155b612186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806135b7602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156121d6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61226d8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508888888888612d9d565b801561228e5760008060016101000a81548160ff0219169083151502179055505b50505050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612328576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806136966024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806134cf6022913960400191505060405180910390fd5b80606960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600080303b90506000811491505090565b6124b261267d565b15612525576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e747261637420686173206578706972656400000000000000000000000081525060200191505060405180910390fd5b61253083838361301a565b505050565b60008383111582906125e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125a757808201518184015260208101905061258c565b50505050905090810190601f1680156125d45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015612673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600060a054431015905090565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561272b57600080fd5b505afa15801561273f573d6000803e3d6000fd5b505050506040513d602081101561275557600080fd5b81019080805190602001909291905050509050600061277f609f5484612b5d90919063ffffffff16565b90506000809050828211156127f25760006127a5609f54856132d490919063ffffffff16565b90506127bc609f5482612b5d90919063ffffffff16565b9250600081860390506127ed609d60149054906101000a900460ff1660ff16600a0a82612b5d90919063ffffffff16565b925050505b6128448460a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b1390919063ffffffff16565b60a160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008211156129ca57609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561293957600080fd5b505af115801561294d573d6000803e3d6000fd5b505050506040513d602081101561296357600080fd5b81019080805190602001909291905050506129c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613561602e913960400191505060405180910390fd5b5b6000811115612b0d57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a7c57600080fd5b505af1158015612a90573d6000803e3d6000fd5b505050506040513d6020811015612aa657600080fd5b8101908080519060200190929190505050612b0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806136066032913960400191505060405180910390fd5b5b50505050565b6000612b5583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612535565b905092915050565b600080831415612b705760009050612bdd565b6000828402905082848281612b8157fe5b0414612bd8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806135406021913960400191505060405180910390fd5b809150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806135e56021913960400191505060405180910390fd5b612cd5816040518060600160405280602281526020016134ad60229139606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125359092919063ffffffff16565b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d2d81606a54612b1390919063ffffffff16565b606a81905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b612da987876012610ce7565b84609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609d60146101000a81548160ff021916908360ff16021790555082609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609f819055508060a08190555050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b612f1581606a546125f590919063ffffffff16565b606a81905550612f6d81606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125f590919063ffffffff16565b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806136716025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061348a6023913960400191505060405180910390fd5b613192816040518060600160405280602681526020016134f160269139606860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125359092919063ffffffff16565b606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061322781606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125f590919063ffffffff16565b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600061331683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061331e565b905092915050565b600080831182906133ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561338f578082015181840152602081019050613374565b50505050905090810190601f1680156133bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816133d657fe5b049050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061342557805160ff1916838001178555613453565b82800160010185558215613453579182015b82811115613452578251825591602001919060010190613437565b5b5090506134609190613464565b5090565b61348691905b8082111561348257600081600090555060010161346a565b5090565b9056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365436f756c646e2774207472616e7366657220737472696b6520746f6b656e7320746f2063616c6c6572536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f756c646e2774207472616e73666572206261636b20737472696b6520746f6b656e7320746f2063616c6c657245524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f2061646472657373436f756c646e2774207472616e73666572206261636b20756e6465726c79696e6720746f6b656e7320746f2063616c6c657243616e277420666f726365207365726965732065787069726174696f6e206f6e206e6f6e2d74657374696e6720656e7669726f6e6d656e747345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373436f756c646e2774207472616e7366657220737472696b6520746f6b656e732066726f6d2063616c6c657245524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582058dda9d0fdd04b526ad45dbae98fa80de10bad3092cc243d3161710ac618aa2c64736f6c634300050b0032'\n  const optionContract = new web3.eth.Contract(OptionABI)\n  const underlyingAssetDecimals = 18\n\n  let deployedAddress\n\n  await optionContract\n    .deploy({ data: bytecode })\n    .send({ from: account })\n    .on('receipt', receipt => {\n      deployedAddress = receipt.contractAddress\n    })\n\n  console.log(`Contract address: ${deployedAddress}`)\n\n  const deployedOptionContract = new web3.eth.Contract(OptionABI, deployedAddress)\n\n  await deployedOptionContract\n    .methods.initialize(\n      optionName,\n      optionSymbol,\n      underlyingAsset,\n      underlyingAssetDecimals,\n      strikeAsset,\n      (strikePrice * 1e18).toString(),\n      expirationBlock\n    )\n    .send({ from: account })\n\n  return { name: optionName, deployedAddress }\n}\n","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { GlobalStyles } from 'theme'\nimport { Header } from 'components'\nimport { useWeb3Provider, Web3Context } from 'hooks/web3'\nimport { Dashboard } from 'pages'\n\nconst basename = process.env.NODE_ENV === 'development' ? '/' : '/option-deployer'\n\nfunction App () {\n  const { web3 } = useWeb3Provider()\n\n  return (\n    <Web3Context.Provider value={web3}>\n      <GlobalStyles />\n      <Router basename={basename}>\n        <Header />\n        <Dashboard />\n      </Router>\n    </Web3Context.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'normalize.css/normalize.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}